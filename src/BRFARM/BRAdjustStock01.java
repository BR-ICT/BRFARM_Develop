/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package BRFARM;

import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wattana
 */
public class BRAdjustStock01 extends javax.swing.JFrame {

    public static String vTRAN_HOUSE, vTRAN_DATE, vTRAN_ITEM, vTRAN_QTY, vTRAN_PENE, vTRAN_TYPE;
    String JPanelAdj = "Feed";
    public static Boolean MathRemark = false;
    String DoubleClick = "No";
    String StsAddStockItem = "No";
    String StsIssueStockItem = "No";
    int vRow = 0;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.US);
    SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd", Locale.US);
    SimpleDateFormat sdf3 = new SimpleDateFormat("yyMMdd", Locale.US);
    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
    public static DefaultTableModel mTransection;
    ClassReturnData crd = new ClassReturnData();
    ClassInsertData cid = new ClassInsertData();
    ClassListData cld = new ClassListData();
    FilterComboBox jcbItem;

    /**
     * Launch the application.
     */
    public BRAdjustStock01() {
        initComponents();
        this.setTitle("BR01E009. Adjust Stock Balance : " + BRLogin.vDuckBreed + " " + BRLogin.vDuckBreedDesc + " : " + BRLogin.vFarm + " " + BRLogin.vFarmDesc);
        mTransection = (DefaultTableModel) jTableTransection.getModel();
        jcbHouse.setModel(new DefaultComboBoxModel(cld.GetResultHouseDesc(BRLogin.vFarm, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll).toArray()));
        jcbPene.setModel(new DefaultComboBoxModel(cld.GetResultPeneDesc(BRLogin.vFarm).toArray()));
        jcbType.setModel(new DefaultComboBoxModel(cld.GetResultTypeDescAdj(BRLogin.vFarm).toArray()));
        jcbItem = new FilterComboBox(cld.GetResultByItemDesc(BRLogin.vFarm, JPanelAdj, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll));
        jcbItem.setBounds(82, 35, 432, 28);
        this.add(jcbItem);
        jXDateStart.setFormats(sdf);
        jXDateStart.setDate(new Date());
        jMenuSave.setEnabled(false);
        jMenuCreate.setEnabled(true);
        jMenuChange.setEnabled(false);
        jMenuDelete.setEnabled(true);
        jMenuRefresh.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonClose = new javax.swing.JButton();
        jLabelHouse = new javax.swing.JLabel();
        jLabelItem = new javax.swing.JLabel();
        jLabelFlockSTDate = new javax.swing.JLabel();
        jXDateStart = new org.jdesktop.swingx.JXDatePicker();
        jLabelItem1 = new javax.swing.JLabel();
        jcbType = new javax.swing.JComboBox();
        jTextLot = new javax.swing.JTextField();
        jLabelItem2 = new javax.swing.JLabel();
        jLabelItem5 = new javax.swing.JLabel();
        jcbHouse = new javax.swing.JComboBox();
        jcbPene = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelFeed = new javax.swing.JPanel();
        jPanelDuck = new javax.swing.JPanel();
        jPanelOther = new javax.swing.JPanel();
        jPanelEgg = new javax.swing.JPanel();
        jPanelTransection = new javax.swing.JScrollPane();
        jTableTransection = new javax.swing.JTable();
        jButtonSubmit = new javax.swing.JButton();
        jLabelItem4 = new javax.swing.JLabel();
        jTextQty = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuSave = new javax.swing.JMenu();
        jMenuCreate = new javax.swing.JMenu();
        jMenuChange = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuRefresh = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FAR_MFARM. LIST");
        setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jLabelHouse.setText("House Code :");

        jLabelItem.setText("Item Code :");

        jLabelFlockSTDate.setText("Date :");

        jLabelItem1.setText("Type :");

        jcbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Farm" }));
        jcbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTypeActionPerformed(evt);
            }
        });
        jcbType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbTypeKeyPressed(evt);
            }
        });

        jTextLot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextLotActionPerformed(evt);
            }
        });

        jLabelItem2.setText("Lot :");

        jLabelItem5.setText("Source :");

        jcbHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select House" }));
        jcbHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbHouseActionPerformed(evt);
            }
        });
        jcbHouse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbHouseKeyPressed(evt);
            }
        });

        jcbPene.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Farm" }));
        jcbPene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPeneActionPerformed(evt);
            }
        });
        jcbPene.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbPeneKeyPressed(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jPanelFeed.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanelFeedComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanelFeedLayout = new javax.swing.GroupLayout(jPanelFeed);
        jPanelFeed.setLayout(jPanelFeedLayout);
        jPanelFeedLayout.setHorizontalGroup(
            jPanelFeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1393, Short.MAX_VALUE)
        );
        jPanelFeedLayout.setVerticalGroup(
            jPanelFeedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Feed", jPanelFeed);

        jPanelDuck.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanelDuckComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanelDuckLayout = new javax.swing.GroupLayout(jPanelDuck);
        jPanelDuck.setLayout(jPanelDuckLayout);
        jPanelDuckLayout.setHorizontalGroup(
            jPanelDuckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1393, Short.MAX_VALUE)
        );
        jPanelDuckLayout.setVerticalGroup(
            jPanelDuckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Duck", jPanelDuck);

        jPanelOther.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanelOtherComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanelOtherLayout = new javax.swing.GroupLayout(jPanelOther);
        jPanelOther.setLayout(jPanelOtherLayout);
        jPanelOtherLayout.setHorizontalGroup(
            jPanelOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1393, Short.MAX_VALUE)
        );
        jPanelOtherLayout.setVerticalGroup(
            jPanelOtherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Vac,Med,Vit", jPanelOther);

        jPanelEgg.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanelEggComponentShown(evt);
            }
        });

        javax.swing.GroupLayout jPanelEggLayout = new javax.swing.GroupLayout(jPanelEgg);
        jPanelEgg.setLayout(jPanelEggLayout);
        jPanelEggLayout.setHorizontalGroup(
            jPanelEggLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1393, Short.MAX_VALUE)
        );
        jPanelEggLayout.setVerticalGroup(
            jPanelEggLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Egg", jPanelEgg);

        jTableTransection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "House", "Date", "Item", "Qty", "Unit", "Source", "Type", "Lot Number", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTransection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTransectionMouseClicked(evt);
            }
        });
        jPanelTransection.setViewportView(jTableTransection);
        if (jTableTransection.getColumnModel().getColumnCount() > 0) {
            jTableTransection.getColumnModel().getColumn(1).setMaxWidth(100);
            jTableTransection.getColumnModel().getColumn(3).setMaxWidth(100);
            jTableTransection.getColumnModel().getColumn(4).setMaxWidth(50);
            jTableTransection.getColumnModel().getColumn(8).setMaxWidth(65);
        }

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jLabelItem4.setText("Qty :");

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jMenuSave.setText("Save :");
        jMenuBar1.add(jMenuSave);

        jMenuCreate.setText("Create :");
        jMenuCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCreateMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuCreate);

        jMenuChange.setText("Change :");
        jMenuChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuChangeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuChange);

        jMenuDelete.setText("Delete :");
        jMenuDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDeleteMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuDelete);

        jMenuRefresh.setText("Refresh :");
        jMenuBar1.add(jMenuRefresh);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSubmit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClose))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelItem4))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabelItem5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbPene, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelItem1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabelHouse)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelFlockSTDate))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelItem2)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextLot)
                            .addComponent(jTextQty)
                            .addComponent(jXDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 179, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearch)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanelTransection)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHouse)
                    .addComponent(jXDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFlockSTDate))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelItem)
                    .addComponent(jTextQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelItem4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbPene, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelItem5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelItem1)
                        .addComponent(jLabelItem2)
                        .addComponent(jTextLot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTransection, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClose)
                    .addComponent(jButtonSubmit))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ResetModel() {

        while (mTransection.getRowCount() > 0) {
            for (int i = 0; i < mTransection.getRowCount(); ++i) {
                mTransection.removeRow(i);
            }
        }

    }

    private void CheckRemark() {

        jButtonSubmit.setEnabled(false);
        for (int i = 0; i <= mTransection.getRowCount() - 1; i++) {
            Boolean phno = (Boolean) mTransection.getValueAt(i, 8);

            if (phno == true) {
                jButtonSubmit.setEnabled(true);
            } else {
                jButtonSubmit.setEnabled(false);
                break;
            }
        }

    }

    private String CheckItemDuplicate() {

        String count = "0";
        for (int i = 0; i <= mTransection.getRowCount() - 1; i++) {
            if (jcbHouse.getSelectedItem().toString().equals((String) mTransection.getValueAt(i, 0))
                    && sdf.format(jXDateStart.getDate()).equals((String) mTransection.getValueAt(i, 1))
                    && jcbItem.getSelectedItem().toString().equals((String) mTransection.getValueAt(i, 2))) {
//                JOptionPane.showMessageDialog(null, jcbHouse.getSelectedItem().toString() + " " + sdf.format(jXDateStart.getDate()) + " " + jcbItem.getSelectedItem().toString() + " Data Already");
//                return String.valueOf(i + 1);
            }
        }
        return count;

    }

    private void CheckCtrlType() {

        if ("Please Select : House".equals(jcbHouse.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select : House");
            jcbType.setSelectedItem("Please Select : Type");
            jcbHouse.requestFocusInWindow();
        } else {

            String[] getHouse = jcbHouse.getSelectedItem().toString().split(" : ");
            String vHouseSelection = getHouse[0];
            String[] getType = jcbType.getSelectedItem().toString().split(" : ");
            String vType = getType[0].trim();
            String vCtrl = crd.CheckTypePro(BRLogin.vFarm, vType);
            String vLot = "";
            if ("1".equals(vCtrl)) {
                vLot = sdf3.format(jXDateStart.getDate()) + vHouseSelection;
            }

            jTextLot.setText(vLot);
        }
    }

    private void CheckCtrlHouse() {

        String[] getHouse = jcbHouse.getSelectedItem().toString().split(" : ");
        String vHouseSelection = getHouse[0];
        String[] getType = jcbType.getSelectedItem().toString().split(" : ");
        String vType = getType[0].trim();
        String vCtrl = crd.CheckTypePro(BRLogin.vFarm, vType);
        String vLot = "";
        if ("1".equals(vCtrl)) {
            vLot = sdf3.format(jXDateStart.getDate()) + vHouseSelection;
        }

        if ("Please Select : House".equals(jcbHouse.getSelectedItem().toString())) {
            jTextLot.setText("");
        } else {
            jTextLot.setText(vLot);
        }
    }

    private void MouseListener() {

        jTableTransection.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                    if ("No".equals(DoubleClick)) {
                        String[] getHouse = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 0)).split(" : ");
                        vTRAN_HOUSE = getHouse[0];
                        vTRAN_DATE = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 1));
                        String[] getItem = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 2)).split(" : ");
                        vTRAN_ITEM = getItem[0];
                        vTRAN_QTY = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 3));
                        String[] getSource = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 5)).split(" : ");
                        vTRAN_PENE = getSource[0];
                        String[] getType = String.valueOf(mTransection.getValueAt(jTableTransection.getSelectedRow(), 6)).split(" : ");
                        vTRAN_TYPE = getType[0];
                        vRow = jTableTransection.getSelectedRow();
                        new BRIssueStock02().setVisible(true);
                        DoubleClick = "Yes";
                    }
                }
            }
        });

    }

    private void ResetForm() {
        jcbType.setSelectedIndex(0);
        jTextQty.setText("");
        jTextLot.setText("");
        jcbHouse.requestFocusInWindow();
        CheckRemark();
    }

    private void InsertDInvenBal() {
        cid.DeleteDInvenBal(BRLogin.vFarm, sdf.format(jXDateStart.getDate()), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
        cid.InsertMTranDInvenBal(BRLogin.vFarm, sdf.format(jXDateStart.getDate()), sdf2.format(jXDateStart.getDate()), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
    }

    private void AddStockItem(String vItemCtrl, String vItemStock, String vSource, String vType, String date, String vHouseSelection, String vHouseLocation, String vItem, String vItemEff, String lot, Float qty) {

        //Add Item Stock & Not Item Effect Stock
        if ("1".equals(vItemStock) && "".equals(vItemEff)) {
            String CheckInvenBalNotDate = crd.CheckInvenBalDuplicateNotDate(BRLogin.vFarm, vHouseSelection, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String CheckInvenLotNotDate = crd.CheckInvenLotDuplicateNotDate(BRLogin.vFarm, vHouseSelection, lot, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String CheckHouseMulti = crd.CheckHouseMulti(BRLogin.vFarm, vHouseSelection);
            String breed;
            if ("1".equals(CheckHouseMulti)) {
                breed = "AL";
            } else {
                breed = BRLogin.vDuckBreed;
            }

            if (Integer.valueOf(CheckInvenBalNotDate) == 0) {
                cid.InsertInvenBal(BRLogin.vFarm, vHouseSelection, date, vItem, String.valueOf(qty), breed);
                cid.InsertInvenLot(BRLogin.vFarm, vHouseSelection, lot, date, vItem, String.valueOf(qty), breed);
                cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                StsAddStockItem = "Yes";
            } else {

                if (Integer.valueOf(CheckInvenLotNotDate) == 0) {
                    cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseSelection, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                    cid.InsertInvenLot(BRLogin.vFarm, vHouseSelection, lot, date, vItem, String.valueOf(qty), breed);
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                    StsAddStockItem = "Yes";
                } else {
                    cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseSelection, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                    cid.UpdateInvenLot(BRLogin.vFarm, vHouseSelection, lot, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                    StsAddStockItem = "Yes";
                }

            }

            float gender = Float.valueOf(vHouseSelection.substring(3, 4)) % 2;
            if (vItem.equals(BRLogin.vDuckBreed + "102001") || vItem.equals(BRLogin.vDuckBreed + "102002") || vItem.equals(BRLogin.vDuckBreed + "102003") || vItem.equals(BRLogin.vDuckBreed + "102004")) {
                if (gender == 0) {
                    cid.UpdateGrowerFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                } else {
                    cid.UpdateGrowerMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                }

            } else if (vItem.equals(BRLogin.vDuckBreed + "102005") || vItem.equals(BRLogin.vDuckBreed + "102006") || vItem.equals(BRLogin.vDuckBreed + "102007") || vItem.equals(BRLogin.vDuckBreed + "102008")) {
                if (gender == 0) {
                    cid.UpdateGrowerMTFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                } else {
                    cid.UpdateGrowerMTMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                }
            } else if (vItem.equals(BRLogin.vDuckBreed + "202001") || vItem.equals(BRLogin.vDuckBreed + "202002") || vItem.equals(BRLogin.vDuckBreed + "202003") || vItem.equals(BRLogin.vDuckBreed + "202004")) {
                if (gender == 0) {
                    cid.UpdateLayingFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                } else {
                    cid.UpdateLayingMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty), BRLogin.vDuckBreed);
                }
            }

        }

        //Add Item Stock & Item Effect Stock
        if ("1".equals(vItemStock) && !"".equals(vItemEff)) {
            String ItemOnhand = crd.CheckItemOnhand(BRLogin.vFarm, vHouseLocation, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String ItemEffOnhand = crd.CheckItemOnhand(BRLogin.vFarm, vHouseLocation, vItemEff, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String CheckHouseMulti = crd.CheckHouseMulti(BRLogin.vFarm, vHouseSelection);
            String breed;
            if ("1".equals(CheckHouseMulti)) {
                breed = "AL";
            } else {
                breed = BRLogin.vDuckBreed;
            }

            if (qty <= Float.valueOf(ItemEffOnhand)) {
                String CheckInvenBalNotDate = crd.CheckInvenBalDuplicateNotDate(BRLogin.vFarm, vHouseLocation, vItem, vItem, breed, BRLogin.vDuckBreedAll);
                String CheckInvenLotNotDate = crd.CheckInvenLotDuplicateNotDate(BRLogin.vFarm, vHouseLocation, lot, vItem, vItem, breed, BRLogin.vDuckBreedAll);

                //Add Item Stock
                if (Integer.valueOf(CheckInvenBalNotDate) == 0) {
                    cid.InsertInvenBal(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty), breed);
                    cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItem, String.valueOf(qty), breed);
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                    StsAddStockItem = "Yes";
                } else {
                    if (Integer.valueOf(CheckInvenLotNotDate) == 0) {
                        cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                        cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItem, String.valueOf(qty), breed);
                        cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                        StsAddStockItem = "Yes";
                    } else {
                        cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                        cid.UpdateInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItem, String.valueOf(qty), breed, BRLogin.vDuckBreedAll);
                        cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                        StsAddStockItem = "Yes";
                    }

                }

                //Add Item Effect Stock
                String CheckEffInvenBalNotDate = crd.CheckInvenBalDuplicateNotDate(BRLogin.vFarm, vHouseLocation, vItemEff, vItemEff, breed, BRLogin.vDuckBreedAll);
                if (Integer.valueOf(CheckEffInvenBalNotDate) == 0) {
                    cid.InsertInvenBal(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(qty * -1), breed);
                    cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItemEff, String.valueOf(qty * -1), breed);
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(qty * -1), breed);
                    StsAddStockItem = "Yes";

                } else {
                    List<String> getListQtyEffInvenLot = cld.GetResultQtyInvenLot(BRLogin.vFarm, vHouseLocation, vItemEff, vItemEff, breed, BRLogin.vDuckBreedAll);
                    for (int ii = 0; ii < getListQtyEffInvenLot.size(); ii++) {
                        String[] CheckQtyEffInvenLot = getListQtyEffInvenLot.get(ii).split(";");
                        String vQtyEff = CheckQtyEffInvenLot[0].trim();
                        String vLotEff = CheckQtyEffInvenLot[1].trim();
                        if ("0".equals(vLotEff)) {
                            vLotEff = "";
                        }
                        System.out.println(vQtyEff + " : " + vLotEff);

                        if (qty != 0) {
                            if (qty <= Float.valueOf(vQtyEff)) {
                                cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(qty * -1), breed, BRLogin.vDuckBreedAll);
                                cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLotEff, vItemEff, String.valueOf(qty * -1), breed, BRLogin.vDuckBreedAll);
                                cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(qty * -1), breed);
                                qty -= qty;
                            } else {
                                cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(Float.valueOf(vQtyEff) * -1), breed, BRLogin.vDuckBreedAll);
                                cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLotEff, vItemEff, String.valueOf(Float.valueOf(vQtyEff) * -1), breed, BRLogin.vDuckBreedAll);
                                cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(Float.valueOf(vQtyEff) * -1), breed);
                                qty -= Float.valueOf(vQtyEff);
                            }
                        }
                    }
                    if (qty == 0) {
                        StsAddStockItem = "Yes";
                    } else {
                        JOptionPane.showMessageDialog(null, "Item : " + vItem + " lot : " + vItem + " not enough");
                        StsIssueStockItem = "No";
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Item Effect : " + vItemEff + " not enough");
                StsAddStockItem = "No";
            }
        }
        //Add Item Effect Non Stock

        if ("0".equals(vItemStock) && !"".equals(vItemEff)) {
            String ItemEffOnhand = crd.CheckItemOnhand(BRLogin.vFarm, vHouseLocation, vItemEff, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String CheckHouseMulti = crd.CheckHouseMulti(BRLogin.vFarm, vHouseSelection);
            String breed;
            if ("1".equals(CheckHouseMulti)) {
                breed = "AL";
            } else {
                breed = BRLogin.vDuckBreed;
            }

            if (qty <= Float.valueOf(ItemEffOnhand)) {
                String CheckEffInvenBal = crd.CheckInvenBalDuplicateNotDate(BRLogin.vFarm, vHouseLocation, vItemEff, vItemEff, breed, BRLogin.vDuckBreedAll);

                if ("0".equals(vItemStock)) {
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty), breed);
                }

                if (Integer.valueOf(CheckEffInvenBal) == 0) {
                    cid.InsertInvenBal(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(qty * -1), breed);
                    cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItemEff, String.valueOf(qty * -1), breed);
                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(qty * -1), breed);
                    StsAddStockItem = "Yes";
                } else {
                    List<String> getListQtyEffInvenLot = cld.GetResultQtyInvenLot(BRLogin.vFarm, vHouseLocation, vItemEff, vItemEff, breed, BRLogin.vDuckBreedAll);
                    for (int ii = 0; ii < getListQtyEffInvenLot.size(); ii++) {
                        String[] CheckQtyEffInvenLot = getListQtyEffInvenLot.get(ii).split(";");
                        String vQtyEff = CheckQtyEffInvenLot[0].trim();
                        String vLotEff = CheckQtyEffInvenLot[1].trim();
                        if ("0".equals(vLotEff)) {
                            vLotEff = "";
                        }
                        System.out.println(vQtyEff + " : " + vLotEff);

                        if (qty != 0) {

                            if (qty <= Float.valueOf(vQtyEff)) {
                                cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(qty * -1), breed, BRLogin.vDuckBreedAll);
                                cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLotEff, vItemEff, String.valueOf(qty * -1), breed, BRLogin.vDuckBreedAll);
                                cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(qty * -1), breed);
                                qty -= qty;
                            } else {
                                cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItemEff, String.valueOf(Float.valueOf(vQtyEff) * -1), breed, BRLogin.vDuckBreedAll);
                                cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLotEff, vItemEff, String.valueOf(Float.valueOf(vQtyEff) * -1), breed, BRLogin.vDuckBreedAll);
                                cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItemEff, lot, vType, vSource, String.valueOf(Float.valueOf(vQtyEff) * -1), breed);
                                qty -= Float.valueOf(vLotEff);
                            }
                        }
                    }
                    if (qty == 0) {
                        StsAddStockItem = "Yes";
                    } else {
                        JOptionPane.showMessageDialog(null, "Item : " + vItem + " lot : " + vItem + " not enough");
                        StsIssueStockItem = "No";
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Item Effect : " + vItemEff + " not enough");
                StsAddStockItem = "No";
            }
        }

    }

    private void IssueStockItem(String vItemCtrl, String vItemStock, String vSource, String vType, String date, String vHouseSelection, String vHouseLocation, String vItem, String vItemEff, String lot, Float qty) {

        //Issue Item Stock
        String ItemOnhand = "0";
        if ("".equals(lot)) {
            ItemOnhand = crd.CheckItemOnhand(BRLogin.vFarm, vHouseLocation, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
        } else {
            ItemOnhand = crd.CheckItemOnhandByLot(BRLogin.vFarm, vHouseLocation, vItem, lot, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
        }

        if (qty <= Float.valueOf(ItemOnhand) && !"0".equals(ItemOnhand)) {
            String CheckInvenBalNotDate = crd.CheckInvenBalDuplicateNotDate(BRLogin.vFarm, vHouseLocation, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            String CheckInvenLotNotDate = crd.CheckInvenLotDuplicateNotDate(BRLogin.vFarm, vHouseLocation, lot, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            List<String> getListQtyInvenLot;
            if ("".equals(lot)) {
                getListQtyInvenLot = cld.GetResultQtyInvenLot(BRLogin.vFarm, vHouseLocation, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            } else {
                getListQtyInvenLot = cld.GetResultQtyInvenLotByLot(BRLogin.vFarm, vHouseLocation, lot, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
            }

            for (int ii = 0; ii < getListQtyInvenLot.size(); ii++) {

                if (qty != 0) {
                    String[] CheckQtyInvenLot = getListQtyInvenLot.get(ii).split(";");
                    String vQty = CheckQtyInvenLot[0].trim();
                    String vLot = CheckQtyInvenLot[1].trim();
                    if ("0".equals(vLot)) {
                        vLot = "";
                    }
                    System.out.println(vQty + " : " + vLot);
                    String CheckInvenBal = crd.CheckDInvenBalDuplicate(BRLogin.vFarm, vHouseLocation, date, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                    String CheckInvenLot = crd.CheckDInvenLotDuplicate(BRLogin.vFarm, vHouseLocation, vLot, date, vItem, vItem, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);

                    if ("1".equals(vItemStock)) {

                        if (Integer.valueOf(CheckInvenBalNotDate) == 0) {
                            cid.InsertInvenBal(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            qty -= qty;
                        } else {
                            if (Integer.valueOf(vItemCtrl) == 0) {

                                if (Integer.valueOf(CheckInvenLotNotDate) == 1) {
                                    cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                    cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, lot, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                                    qty -= qty;
                                } else {
                                    cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                    cid.InsertInvenLot(BRLogin.vFarm, vHouseLocation, lot, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                                    cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, lot, vType, vSource, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                                    qty -= qty;
                                }
                            }
                        }
                        //Insert Onhand DTransection
                        if (Integer.valueOf(CheckInvenBal) == 0 && Integer.valueOf(CheckInvenLot) == 0) {
                            cid.InsertDInvenBal(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(ItemOnhand), BRLogin.vDuckBreed);
                            cid.InsertDInvenLot(BRLogin.vFarm, vHouseLocation, vLot, date, vItem, String.valueOf(ItemOnhand), BRLogin.vDuckBreed);
                        }

                    }

                    if (Integer.valueOf(vItemCtrl) == 1) {

                        if (qty <= Float.valueOf(vQty)) {
                            //Update MTransection
                            cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                            cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLot, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                            cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, vLot, vType, vSource, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            //Update DTransection
                            if (Integer.valueOf(CheckInvenBal) == 1 && Integer.valueOf(CheckInvenLot) == 1) {
                                cid.UpdateDInvenBal(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                cid.UpdateDInvenLot(BRLogin.vFarm, vHouseLocation, vLot, date, vItem, String.valueOf(qty * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                cid.InsertDTransection(BRLogin.vFarm, date, vHouseSelection, vItem, vLot, vType, vSource, String.valueOf(qty), BRLogin.vDuckBreed);
                            }
                            qty -= qty;
                        } else {
                            //Update MTransection
                            cid.UpdateInvenBalChangeDate(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(Float.valueOf(vQty) * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                            cid.UpdateInvenLotWithOutDate(BRLogin.vFarm, vHouseLocation, vLot, vItem, String.valueOf(Float.valueOf(vQty) * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                            cid.InsertMTransection(BRLogin.vFarm, date, vHouseSelection, vItem, vLot, vType, vSource, String.valueOf(Float.valueOf(vQty) * -1), BRLogin.vDuckBreed);
                            //Update DTransection
                            if (Integer.valueOf(CheckInvenBal) == 1 && Integer.valueOf(CheckInvenLot) == 1) {
                                cid.UpdateDInvenBal(BRLogin.vFarm, vHouseLocation, date, vItem, String.valueOf(Float.valueOf(vQty) * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                cid.UpdateDInvenLot(BRLogin.vFarm, vHouseLocation, vLot, date, vItem, String.valueOf(Float.valueOf(vQty) * -1), BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
                                cid.InsertDTransection(BRLogin.vFarm, date, vHouseSelection, vItem, vLot, vType, vSource, String.valueOf(Float.valueOf(vQty)), BRLogin.vDuckBreed);
                            }
                            qty -= Float.valueOf(vQty);
                        }

                        float gender = Float.valueOf(vHouseSelection.substring(3, 4)) % 2;
                        if (vItem.equals(BRLogin.vDuckBreed + "102001") || vItem.equals(BRLogin.vDuckBreed + "102002") || vItem.equals(BRLogin.vDuckBreed + "102003") || vItem.equals(BRLogin.vDuckBreed + "102004")) {
                            if (gender == 0) {
                                cid.UpdateGrowerFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            } else {
                                cid.UpdateGrowerMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            }

                        } else if (vItem.equals(BRLogin.vDuckBreed + "102005") || vItem.equals(BRLogin.vDuckBreed + "102006") || vItem.equals(BRLogin.vDuckBreed + "102007") || vItem.equals(BRLogin.vDuckBreed + "102008")) {
                            if (gender == 0) {
                                cid.UpdateGrowerMTFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            } else {
                                cid.UpdateGrowerMTMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            }
                        } else if (vItem.equals(BRLogin.vDuckBreed + "202001") || vItem.equals(BRLogin.vDuckBreed + "202002") || vItem.equals(BRLogin.vDuckBreed + "202003") || vItem.equals(BRLogin.vDuckBreed + "202004")) {
                            if (gender == 0) {
                                cid.UpdateLayingFemale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            } else {
                                cid.UpdateLayingMale(BRLogin.vFarm, vHouseSelection, lot, date, String.valueOf(qty * -1), BRLogin.vDuckBreed);
                            }
                        }

                    }
                }

            }

            if (qty == 0) {
                StsIssueStockItem = "Yes";
            } else {
                JOptionPane.showMessageDialog(null, "Item : " + vItem + " not enough");
                StsIssueStockItem = "No";
            }

        } else {
            JOptionPane.showMessageDialog(null, "Item : " + vItem + " not enough");
            StsIssueStockItem = "No";
        }

    }

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jMenuCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCreateMouseClicked
        // TODO add your handling code here:
        if ("Please Select : House".equals(jcbHouse.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select House");
            jcbHouse.requestFocusInWindow();
        } else if ("Please Select : Item".equals(jcbItem.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select Item");
            jcbItem.requestFocusInWindow();
        } else if ("Please Select : Pene".equals(jcbPene.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select Source");
            jcbPene.requestFocusInWindow();
        } else if ("Please Select : Type".equals(jcbType.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select Type");
            jcbType.requestFocusInWindow();
        } else if ("".equals(jTextQty.getText())) {
            JOptionPane.showMessageDialog(this, "Please Input Qty");
            jTextQty.requestFocusInWindow();
        } else if ("".equals(jTextLot.getText())) {
            JOptionPane.showMessageDialog(this, "Please Input Lot Number");
            jTextQty.requestFocusInWindow();
        } else if (!"0".equals(CheckItemDuplicate())) {
            jcbHouse.requestFocusInWindow();
        } else {

            if (!"".equals(jTextQty.getText())) {
                boolean hasDigit = false;
                int length = jTextQty.getText().length();
                for (int i = 0; i < length; ++i) {
                    if (Character.isDigit(jTextQty.getText().charAt(i))) {
                        hasDigit = true;
                    } else {
                        if (".".equals(String.valueOf(jTextQty.getText().charAt(i))) || "-".equals(String.valueOf(jTextQty.getText().charAt(i)))) {
                            continue;
                        } else {
                            hasDigit = false;
                            break;
                        }
                    }

                }

                if (hasDigit != true) {
                    JOptionPane.showMessageDialog(this, "Please Input Number");
                    jTextQty.requestFocusInWindow();
                } else {

                    String vHouseSelection = jcbHouse.getSelectedItem().toString();
                    String[] getItem = jcbItem.getSelectedItem().toString().split(" : ");
                    String vItem = getItem[0].trim();
                    String vItemDesc = getItem[1].trim();
                    String vUnit = getItem[2].trim();
                    String date = sdf.format(jXDateStart.getDate());
                    String qty = jTextQty.getText().trim();
                    String vSource = jcbPene.getSelectedItem().toString();
                    String vType = jcbType.getSelectedItem().toString();
                    String lot = jTextLot.getText().trim();
                    Boolean remark = false;

                    if ("Feed".equals(JPanelAdj) || "Other".equals(JPanelAdj)) {
                        remark = true;
                    } else {
                        remark = false;
                    }

                    mTransection.insertRow(jTableTransection.getRowCount(), new Object[]{
                        vHouseSelection,
                        date,
                        vItem + " : " + vItemDesc + " : " + vUnit,
                        qty,
                        vUnit,
                        vSource,
                        vType,
                        lot,
                        remark
                    });
                    jTableTransection.requestFocusInWindow();
                }
            }
            CheckRemark();
        }

    }//GEN-LAST:event_jMenuCreateMouseClicked

    private void jMenuChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuChangeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuChangeMouseClicked

    private void jMenuDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDeleteMouseClicked
        // TODO add your handling code here:
        int index = jTableTransection.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "Please select record for Delete!");
        } else {

            String[] getHouse = mTransection.getValueAt(jTableTransection.getSelectedRow(), 0).toString().split(" : ");
            String vHouseSelection = getHouse[0].trim();
            String date = mTransection.getValueAt(jTableTransection.getSelectedRow(), 1).toString();
            String[] getItem = mTransection.getValueAt(jTableTransection.getSelectedRow(), 2).toString().split(" : ");
            String vItem = getItem[0].trim();
            cid.DeleteDInfor(BRLogin.vFarm, BRLogin.vDuckBreed, date + vHouseSelection + vItem + BRLogin.vUsername.toUpperCase());
            mTransection.removeRow(jTableTransection.getSelectedRow());

        }
        CheckRemark();
    }//GEN-LAST:event_jMenuDeleteMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if ("Yes".equals(DoubleClick)) {
            DoubleClick = "No";
            mTransection.setValueAt(MathRemark, vRow, 8);
        }
        CheckRemark();
    }//GEN-LAST:event_formWindowActivated

    private void jcbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTypeActionPerformed
        // TODO add your handling code here:
        CheckCtrlType();
    }//GEN-LAST:event_jcbTypeActionPerformed

    private void jcbTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbTypeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbTypeKeyPressed

    private void jcbHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbHouseActionPerformed
        // TODO add your handling code here:
        if ("Egg".equals(JPanelAdj)) {
            String[] getHouse = jcbHouse.getSelectedItem().toString().split(" : ");
            String vHouse = getHouse[0];
            this.remove(jcbItem);
            jcbItem.removeAll();
            jcbItem = new FilterComboBox(cld.GetResultByItemHouse(BRLogin.vFarm, vHouse, BRLogin.vDuckBreed));
            jcbItem.setBounds(82, 35, 432, 28);
            this.add(jcbItem);
        }
        CheckCtrlHouse();
    }//GEN-LAST:event_jcbHouseActionPerformed

    private void jcbHouseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbHouseKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbHouseKeyPressed

    private void jcbPeneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPeneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbPeneActionPerformed

    private void jcbPeneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbPeneKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbPeneKeyPressed

    private void jPanelEggComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelEggComponentShown
        // TODO add your handling code here:
        JPanelAdj = "Egg";
        String vPenePAL = crd.CheckPenePAL(BRLogin.vFarm);
        jcbPene.setSelectedItem(vPenePAL);
        jcbType.setModel(new DefaultComboBoxModel(cld.GetBE(BRLogin.vFarm).toArray()));
        this.remove(jcbItem);
        jcbItem.removeAll();
        jcbItem = new FilterComboBox(cld.GetResultByItemDesc(BRLogin.vFarm, JPanelAdj, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll));
        jcbItem.setBounds(82, 35, 432, 28);
        this.add(jcbItem);
        jcbItem.requestFocusInWindow();
        jTextQty.setText("");
        jTextLot.setText("");
        jButtonSearch.setEnabled(false);
        if (!"".equals(jcbHouse.getSelectedItem().toString())) {
            String[] getHouse = jcbHouse.getSelectedItem().toString().split(" : ");
            String vHouse = getHouse[0];
            this.remove(jcbItem);
            jcbItem.removeAll();
            jcbItem = new FilterComboBox(cld.GetResultByItemHouse(BRLogin.vFarm, vHouse, BRLogin.vDuckBreed));
            jcbItem.setBounds(82, 35, 432, 28);
            this.add(jcbItem);
        }
        jcbItem.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent event) {
                if (event.getStateChange() == ItemEvent.SELECTED) {
                }
            }
        }
        );

    }//GEN-LAST:event_jPanelEggComponentShown

    private void jPanelOtherComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelOtherComponentShown
        // TODO add your handling code here:
        JPanelAdj = "Other";
        String vPenePAL = crd.CheckPenePAL(BRLogin.vFarm);
        jcbPene.setSelectedItem(vPenePAL);
//        jcbType.setSelectedItem(crd.CheckTypeWOM(MainLogin.vFarm));
        this.remove(jcbItem);
        jcbItem.removeAll();
        jcbItem = new FilterComboBox(cld.GetResultByItemDesc(BRLogin.vFarm, JPanelAdj, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll));
        jcbItem.setBounds(82, 35, 432, 28);
        this.add(jcbItem);
        jcbType.setModel(new DefaultComboBoxModel(cld.GetResultTypeDescAdj(BRLogin.vFarm).toArray()));
        jcbItem.requestFocusInWindow();
        jTextQty.setText("");
        jButtonSearch.setEnabled(false);

        jcbItem.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent event) {
                if (event.getStateChange() == ItemEvent.SELECTED) {
                }
            }
        }
        );

    }//GEN-LAST:event_jPanelOtherComponentShown

    private void jPanelDuckComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelDuckComponentShown
        // TODO add your handling code here:
        JPanelAdj = "Duck";
        String vPenePAL = crd.CheckPenePAL(BRLogin.vFarm);
        jcbPene.setSelectedItem(vPenePAL);
        jcbType.setModel(new DefaultComboBoxModel(cld.GetResultTypeDescAdj(BRLogin.vFarm).toArray()));
//        jcbType.setSelectedItem(crd.CheckTypeWOP(MainLogin.vFarm));
        this.remove(jcbItem);
        jcbItem.removeAll();
        jcbItem = new FilterComboBox(cld.GetResultByItemDesc(BRLogin.vFarm, JPanelAdj, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll));
        jcbItem.setBounds(82, 35, 432, 28);
        this.add(jcbItem);
        jcbItem.requestFocusInWindow();
        jTextQty.setText("");
        jButtonSearch.setEnabled(true);

        jcbItem.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent event) {
                if (event.getStateChange() == ItemEvent.SELECTED) {
                }
            }
        }
        );

    }//GEN-LAST:event_jPanelDuckComponentShown

    private void jPanelFeedComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelFeedComponentShown
        // TODO add your handling code here:
        JPanelAdj = "Feed";
        String vPenePAL = crd.CheckPenePAL(BRLogin.vFarm);
        jcbPene.setSelectedItem(vPenePAL);
//        jcbType.setSelectedItem(crd.CheckTypeWOM(MainLogin.vFarm));
        this.remove(jcbItem);
        jcbItem.removeAll();
        jcbItem = new FilterComboBox(cld.GetResultByItemDesc(BRLogin.vFarm, JPanelAdj, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll));
        jcbItem.setBounds(82, 35, 432, 28);
        this.add(jcbItem);
        jcbType.setModel(new DefaultComboBoxModel(cld.GetResultTypeDescAdj(BRLogin.vFarm).toArray()));
        jcbItem.requestFocusInWindow();
        jTextQty.setText("");
        jButtonSearch.setEnabled(false);

        jcbItem.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent event) {
                if (event.getStateChange() == ItemEvent.SELECTED) {
                }
            }
        }
        );

    }//GEN-LAST:event_jPanelFeedComponentShown

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        int ii = 0;
        for (int i = 0; i <= mTransection.getRowCount() - 1; i++) {
            String[] getHouse = mTransection.getValueAt(i, 0).toString().split(" : ");
            String vHouseSelection = getHouse[0].trim();
            String date = mTransection.getValueAt(i, 1).toString();
            String[] getItem = mTransection.getValueAt(i, 2).toString().split(" : ");
            String vItem = getItem[0].trim();
            String vHouseLocation = crd.CheckItemLoc(BRLogin.vFarm, vItem);
            float qty = Float.valueOf(mTransection.getValueAt(i, 3).toString());
            String[] getSource = mTransection.getValueAt(i, 5).toString().split(" : ");
            String vSource = getSource[0].trim();
            String[] getType = mTransection.getValueAt(i, 6).toString().split(" : ");
            String vType = getType[0].trim();
            String lot = mTransection.getValueAt(i, 7).toString();
            String vPro = crd.CheckTypePro(BRLogin.vFarm, vType);
            String[] getItemStockCtrlEff = crd.CheckItemStockCtrlEff(BRLogin.vFarm, vItem).split(" : ");
            String vItemStock = getItemStockCtrlEff[0].trim();
            String vItemCtrl = getItemStockCtrlEff[1].trim();
            String vItemEff = getItemStockCtrlEff[2].trim();
            if ("0".equals(vItemEff)) {
                vItemEff = "";
            }
            if ("".equals(vHouseLocation)) {
                vHouseLocation = vHouseSelection;
            }
            if("BE".equals(vType)){
                vHouseLocation = vHouseSelection;
            }
            if ("1".equals(vPro)) {

                if ("-".equals(String.valueOf(qty).substring(0, 1))) {
                    IssueStockItem(vItemCtrl, vItemStock, vSource, vType, date, vHouseSelection, vHouseSelection, vItem, vItemEff, lot, qty * -1);
                } else {
                    AddStockItem(vItemCtrl, vItemStock, vSource, vType, date, vHouseSelection, vHouseLocation, vItem, vItemEff, lot, qty);
                }

                if ("Yes".equals(StsAddStockItem) || "Yes".equals(StsIssueStockItem)) {
                    cid.InsertMInforByItem(BRLogin.vFarm, BRLogin.vDuckBreed, vHouseSelection, vItem, date);
                    cid.DeleteDInforByItem(BRLogin.vFarm, BRLogin.vDuckBreed, vHouseSelection, vItem, date);
                    ii++;
                } else {
                    break;
                }

            } else {
                IssueStockItem(vItemCtrl, vItemStock, vSource, vType, date, vHouseSelection, vHouseLocation, vItem, vItemEff, lot, qty);
                if ("Yes".equals(StsIssueStockItem)) {
                    cid.InsertMInforByItem(BRLogin.vFarm, BRLogin.vDuckBreed, vHouseSelection, vItem, date);
                    cid.DeleteDInforByItem(BRLogin.vFarm, BRLogin.vDuckBreed, vHouseSelection, vItem, date);
                    
                    ii++;
                } else {
                    break;
                }
            }

        }

        for (int i = 0; i <= ii - 1; i++) {
            mTransection.removeRow(0);
        }

        if ("Yes".equals(StsAddStockItem) || "Yes".equals(StsIssueStockItem)) {
            InsertDInvenBal();
            ResetForm();
            JOptionPane.showMessageDialog(null, "Data Post Item Stock Completed");
            StsAddStockItem = "No";
            StsIssueStockItem = "No";
        }

    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jTableTransectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTransectionMouseClicked
        // TODO add your handling code here:
        MouseListener();
        CheckRemark();
    }//GEN-LAST:event_jTableTransectionMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        for (int i = 0; i <= mTransection.getRowCount() - 1; i++) {
            String[] getHouse = mTransection.getValueAt(i, 0).toString().split(" : ");
            String vHouseSelection = getHouse[0].trim();
            String date = mTransection.getValueAt(i, 1).toString();
            String[] getItem = mTransection.getValueAt(i, 2).toString().split(" : ");
            String vItem = getItem[0].trim();

            cid.DeleteDInfor(BRLogin.vFarm, BRLogin.vDuckBreed, date + vHouseSelection + vItem + BRLogin.vUsername.toUpperCase());
        }

    }//GEN-LAST:event_formWindowClosing

    private void jTextLotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextLotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextLotActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        if ("Please Select : House".equals(jcbHouse.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select House");
            jcbHouse.requestFocusInWindow();
        } else if ("Please Select : Pene".equals(jcbPene.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select Source");
            jcbPene.requestFocusInWindow();
        } else if ("Please Select : Type".equals(jcbType.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "Please Select Type");
            jcbType.requestFocusInWindow();
        } else {
            vTRAN_HOUSE = jcbHouse.getSelectedItem().toString();
            vTRAN_DATE = sdf.format(jXDateStart.getDate());
            vTRAN_PENE = jcbPene.getSelectedItem().toString();
            vTRAN_TYPE = jcbType.getSelectedItem().toString();
            new BRAdjustStock02().setVisible(true);
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BRAdjustStock01.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BRAdjustStock01.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BRAdjustStock01.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BRAdjustStock01.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BRAdjustStock01().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabelFlockSTDate;
    private javax.swing.JLabel jLabelHouse;
    private javax.swing.JLabel jLabelItem;
    private javax.swing.JLabel jLabelItem1;
    private javax.swing.JLabel jLabelItem2;
    private javax.swing.JLabel jLabelItem4;
    private javax.swing.JLabel jLabelItem5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuChange;
    private javax.swing.JMenu jMenuCreate;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuRefresh;
    private javax.swing.JMenu jMenuSave;
    private javax.swing.JPanel jPanelDuck;
    private javax.swing.JPanel jPanelEgg;
    private javax.swing.JPanel jPanelFeed;
    private javax.swing.JPanel jPanelOther;
    private javax.swing.JScrollPane jPanelTransection;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableTransection;
    private javax.swing.JTextField jTextLot;
    private javax.swing.JTextField jTextQty;
    private org.jdesktop.swingx.JXDatePicker jXDateStart;
    private javax.swing.JComboBox jcbHouse;
    private javax.swing.JComboBox jcbPene;
    private javax.swing.JComboBox jcbType;
    // End of variables declaration//GEN-END:variables
}
