/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package BRFARM;

import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wattana
 */
public class BRData01 extends javax.swing.JFrame {

    public static String vFARM_CODE, vFARM_NAME, vFARM_COSTC, vFARM_ADDR1, vFARM_ADDR2, vFARM_TEL, vFARM_FAX;
    public static String vHOUS_FARM, vHOUS_CODE, vHOUS_NAME, vHOUS_LASTMO, vHOUS_MULTI;
    public static String vPENE_CODE, vPENE_NAME;
    public static String vFLOC_CODE, vFLOC_FARM, vFLOC_STDATE, vFLOC_ENDATE, vFLOC_BREED, vFLOC_STATUS, vFLOC_STWEEK;
    public static String vITEM_CODE, vITEM_NAME, vITEM_UNIT, vITEM_GROUP, vITEM_FLOCATON, vITEM_STKCTL, vITEM_STOCK, vITEM_MULTI, vITEM_EFFITEM;
    public static String vINFO_DATE, vINFO_FARM, vINFO_HOUSE, vINFO_ITEM, vINFO_DESC, vINFO_DISE, vINFO_QTY, vINFO_REFER;
    public static String vTYPE_CODE, vTYPE_NAME, vTYPE_PROPERTY;
    public static String vITUN_CODE, vITUN_NAME, vITUN_PROPERTY;
    public static String vITGR_CODE, vITGR_NAME, vITGR_PROPERTY;
    public static String vCERT_CODE, vCERT_NAME;
    public static String OnCreate, OnChange;
    public static String FrameOpen = "Yes";
    public static String JPanel = "Farm";
    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
    DefaultTableModel mFarm, mHouse, mPene, mFlock, mItem, mInfor, mType, mUnit, mGroup, mCert;
    ClassReturnData crd = new ClassReturnData();
    ClassInsertData cid = new ClassInsertData();
    ClassListData cld = new ClassListData();
     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.US);
    SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd", Locale.US);

    /**
     * Launch the application.
     */
    public BRData01() {
        initComponents();
        this.setTitle("FAR_DETAIL : " + BRLogin.vDuckBreed + " " + BRLogin.vDuckBreedDesc + " : " + BRLogin.vFarm + " " + BRLogin.vFarmDesc);
        mFarm = (DefaultTableModel) jTableFarm.getModel();
        mHouse = (DefaultTableModel) jTableHouse.getModel();
        mPene = (DefaultTableModel) jTablePene.getModel();
        mFlock = (DefaultTableModel) jTableFlock.getModel();
        mItem = (DefaultTableModel) jTableItem.getModel();
        mInfor = (DefaultTableModel) jTableInfor.getModel();
        mType = (DefaultTableModel) jTableType.getModel();
        mUnit = (DefaultTableModel) jTableUnit.getModel();
        mGroup = (DefaultTableModel) jTableGroup.getModel();
        mCert = (DefaultTableModel) jTableCert.getModel();
        jXDateStart.setFormats(sdf);
        jXDateEnd.setFormats(sdf);
        jXDateStart.setDate(new Date());
        jXDateEnd.setDate(new Date());
        jMenuSave.setEnabled(false);
        jcbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Farm" }));
        jcbItem.setModel(new DefaultComboBoxModel(cld.GetResultPene(BRLogin.vFarm).toArray()));
        jcbHouse.setModel(new DefaultComboBoxModel(cld.GetResultHouseDesc(BRLogin.vFarm, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll).toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jpFarm = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFarm = new javax.swing.JTable();
        jpHouse = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableHouse = new javax.swing.JTable();
        jpPene = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePene = new javax.swing.JTable();
        jpLock = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableFlock = new javax.swing.JTable();
        jpItem = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableItem = new javax.swing.JTable();
        jpInfor = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableInfor = new javax.swing.JTable();
        jLabelHouse = new javax.swing.JLabel();
        jcbHouse = new javax.swing.JComboBox();
        jLabelItem = new javax.swing.JLabel();
        jcbItem = new javax.swing.JComboBox();
        jLabelFlockSTDate = new javax.swing.JLabel();
        jXDateStart = new org.jdesktop.swingx.JXDatePicker();
        jLabelFlockSTDate1 = new javax.swing.JLabel();
        jXDateEnd = new org.jdesktop.swingx.JXDatePicker();
        jButtonSearch = new javax.swing.JButton();
        jpType = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableType = new javax.swing.JTable();
        jpUnit = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableUnit = new javax.swing.JTable();
        jpGroup = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableGroup = new javax.swing.JTable();
        jpCert = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableCert = new javax.swing.JTable();
        jButtonClose = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuSave = new javax.swing.JMenu();
        jMenuCreate = new javax.swing.JMenu();
        jMenuChange = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuRefresh = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FAR_MFARM. LIST");
        setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jpFarm.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpFarmComponentShown(evt);
            }
        });

        jTableFarm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Farm Code", "Farm Name", "Farm Costc", "Address 1", "Address 2", "Tel", "Fax"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableFarm);

        javax.swing.GroupLayout jpFarmLayout = new javax.swing.GroupLayout(jpFarm);
        jpFarm.setLayout(jpFarmLayout);
        jpFarmLayout.setHorizontalGroup(
            jpFarmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE)
        );
        jpFarmLayout.setVerticalGroup(
            jpFarmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Farm", jpFarm);

        jpHouse.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpHouseComponentShown(evt);
            }
        });

        jTableHouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "House Code", "House Name", "House Last MO", "House Multi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableHouseMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableHouse);

        javax.swing.GroupLayout jpHouseLayout = new javax.swing.GroupLayout(jpHouse);
        jpHouse.setLayout(jpHouseLayout);
        jpHouseLayout.setHorizontalGroup(
            jpHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE)
        );
        jpHouseLayout.setVerticalGroup(
            jpHouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("House", jpHouse);

        jpPene.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpPeneComponentShown(evt);
            }
        });

        jTablePene.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pene Code", "Pene Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePene.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePeneMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTablePene);

        javax.swing.GroupLayout jpPeneLayout = new javax.swing.GroupLayout(jpPene);
        jpPene.setLayout(jpPeneLayout);
        jpPeneLayout.setHorizontalGroup(
            jpPeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpPeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpPeneLayout.setVerticalGroup(
            jpPeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpPeneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Pene", jpPene);

        jpLock.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpLockComponentShown(evt);
            }
        });

        jTableFlock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flock Code", "Flock Start Date", "Flock End Date", "Flock Desc", "Flock Start", "Flock Start Week"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFlock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFlockMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableFlock);

        javax.swing.GroupLayout jpLockLayout = new javax.swing.GroupLayout(jpLock);
        jpLock.setLayout(jpLockLayout);
        jpLockLayout.setHorizontalGroup(
            jpLockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpLockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpLockLayout.setVerticalGroup(
            jpLockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpLockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Flock", jpLock);

        jpItem.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpItemComponentShown(evt);
            }
        });

        jTableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Item Unit", "Item Group", "Item Floc", "Item Stkctl", "Item Stock", "Item Effitem", "Item Multi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItemMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableItem);

        javax.swing.GroupLayout jpItemLayout = new javax.swing.GroupLayout(jpItem);
        jpItem.setLayout(jpItemLayout);
        jpItemLayout.setHorizontalGroup(
            jpItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpItemLayout.setVerticalGroup(
            jpItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Item", jpItem);

        jpInfor.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpInforComponentShown(evt);
            }
        });

        jTableInfor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Info Date", "Info House", "Info Item", "Info Desc", "Info Dise", "Infor Qty", "Qty Reference"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInfor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInforMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTableInfor);

        jLabelHouse.setText("House Code :");

        jcbHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select House" }));
        jcbHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbHouseActionPerformed(evt);
            }
        });
        jcbHouse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbHouseKeyPressed(evt);
            }
        });

        jLabelItem.setText("Info Desc:");

        jcbItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Desc", "BE", "PAL" }));
        jcbItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbItemActionPerformed(evt);
            }
        });
        jcbItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbItemKeyPressed(evt);
            }
        });

        jLabelFlockSTDate.setText("Start Date :");

        jLabelFlockSTDate1.setText("To Date :");

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpInforLayout = new javax.swing.GroupLayout(jpInfor);
        jpInfor.setLayout(jpInforLayout);
        jpInforLayout.setHorizontalGroup(
            jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInforLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelHouse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbItem, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelFlockSTDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelFlockSTDate1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpInforLayout.createSequentialGroup()
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jpInforLayout.setVerticalGroup(
            jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelFlockSTDate1)
                        .addComponent(jXDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSearch))
                    .addGroup(jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelFlockSTDate)
                        .addComponent(jXDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelItem)
                        .addComponent(jcbHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelHouse)))
                .addContainerGap(399, Short.MAX_VALUE))
            .addGroup(jpInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jpInforLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane.addTab("Information", jpInfor);

        jpType.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpTypeComponentShown(evt);
            }
        });

        jTableType.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type Code", "Type Name", "Type Property"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTypeMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTableType);

        javax.swing.GroupLayout jpTypeLayout = new javax.swing.GroupLayout(jpType);
        jpType.setLayout(jpTypeLayout);
        jpTypeLayout.setHorizontalGroup(
            jpTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpTypeLayout.setVerticalGroup(
            jpTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Type", jpType);

        jpUnit.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpUnitComponentShown(evt);
            }
        });

        jTableUnit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Unit Code", "Unit Name", "Unit Property"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUnit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableUnitMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jTableUnit);

        javax.swing.GroupLayout jpUnitLayout = new javax.swing.GroupLayout(jpUnit);
        jpUnit.setLayout(jpUnitLayout);
        jpUnitLayout.setHorizontalGroup(
            jpUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpUnitLayout.setVerticalGroup(
            jpUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Item Unit", jpUnit);

        jpGroup.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpGroupComponentShown(evt);
            }
        });

        jTableGroup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Group Code", "Group Name", "Group Property"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableGroupMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(jTableGroup);

        javax.swing.GroupLayout jpGroupLayout = new javax.swing.GroupLayout(jpGroup);
        jpGroup.setLayout(jpGroupLayout);
        jpGroupLayout.setHorizontalGroup(
            jpGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpGroupLayout.setVerticalGroup(
            jpGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Item Group", jpGroup);

        jpCert.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jpCertComponentShown(evt);
            }
        });

        jTableCert.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificate No", "Standard"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCertMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(jTableCert);

        javax.swing.GroupLayout jpCertLayout = new javax.swing.GroupLayout(jpCert);
        jpCert.setLayout(jpCertLayout);
        jpCertLayout.setHorizontalGroup(
            jpCertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
            .addGroup(jpCertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 1219, Short.MAX_VALUE))
        );
        jpCertLayout.setVerticalGroup(
            jpCertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
            .addGroup(jpCertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Certificate", jpCert);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jMenuSave.setText("Save :");
        jMenuBar1.add(jMenuSave);

        jMenuCreate.setText("Create :");
        jMenuCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCreateMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuCreate);

        jMenuChange.setText("Change :");
        jMenuChange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuChangeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuChange);

        jMenuDelete.setText("Delete :");
        jMenuDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDeleteMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuDelete);

        jMenuRefresh.setText("Refresh :");
        jMenuRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRefreshMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRefresh);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonClose)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClose)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ResetModel() {

        if ("Farm".equals(JPanel)) {
            while (mFarm.getRowCount() > 0) {
                for (int i = 0; i < mFarm.getRowCount(); ++i) {
                    mFarm.removeRow(i);
                }
            }
        } else if ("House".equals(JPanel)) {
            while (mHouse.getRowCount() > 0) {
                for (int i = 0; i < mHouse.getRowCount(); ++i) {
                    mHouse.removeRow(i);
                }
            }
        } else if ("Pene".equals(JPanel)) {
            while (mPene.getRowCount() > 0) {
                for (int i = 0; i < mPene.getRowCount(); ++i) {
                    mPene.removeRow(i);
                }
            }
        } else if ("Flock".equals(JPanel)) {
            while (mFlock.getRowCount() > 0) {
                for (int i = 0; i < mFlock.getRowCount(); ++i) {
                    mFlock.removeRow(i);
                }
            }
        } else if ("Item".equals(JPanel)) {
            while (mItem.getRowCount() > 0) {
                for (int i = 0; i < mItem.getRowCount(); ++i) {
                    mItem.removeRow(i);
                }
            }
        } else if ("Infor".equals(JPanel)) {
            while (mInfor.getRowCount() > 0) {
                for (int i = 0; i < mInfor.getRowCount(); ++i) {
                    mInfor.removeRow(i);
                }
            }
        } else if ("Type".equals(JPanel)) {
            while (mType.getRowCount() > 0) {
                for (int i = 0; i < mType.getRowCount(); ++i) {
                    mType.removeRow(i);
                }
            }
        } else if ("Unit".equals(JPanel)) {
            while (mUnit.getRowCount() > 0) {
                for (int i = 0; i < mUnit.getRowCount(); ++i) {
                    mUnit.removeRow(i);
                }
            }
        } else if ("Group".equals(JPanel)) {
            while (mGroup.getRowCount() > 0) {
                for (int i = 0; i < mGroup.getRowCount(); ++i) {
                    mGroup.removeRow(i);
                }
            }
        } else {
            while (mCert.getRowCount() > 0) {
                for (int i = 0; i < mCert.getRowCount(); ++i) {
                    mCert.removeRow(i);
                }
            }
        }

    }

    private void FarmDetail() {

        List<String> getListFarmDetail = cld.GetResultFarmDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListFarmDetail.size(); i++) {
            String[] CheckFarmDetail = getListFarmDetail.get(i).split(";");
            mFarm.insertRow(mFarm.getRowCount(), new Object[]{
                CheckFarmDetail[0].trim(),
                CheckFarmDetail[1].trim(),
                CheckFarmDetail[2].trim(),
                CheckFarmDetail[3].trim(),
                CheckFarmDetail[4].trim(),
                CheckFarmDetail[5].trim(),
                CheckFarmDetail[6].trim()
            });
        }

    }

    private void HouseDetail() {

        List<String> getListHouseDetail = cld.GetResultHouseDetail(BRLogin.vFarm, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
        ResetModel();

        for (int i = 0; i < getListHouseDetail.size(); i++) {
            String[] CheckHouseDetail = getListHouseDetail.get(i).split(";");
            String HOUS_MULTI;
            if ("0".equals(CheckHouseDetail[3].trim()) || "".equals(CheckHouseDetail[3].trim())) {
                HOUS_MULTI = "No";
            } else {
                HOUS_MULTI = "Yes";
            }

            mHouse.insertRow(mHouse.getRowCount(), new Object[]{
                CheckHouseDetail[0].trim(),
                CheckHouseDetail[1].trim(),
                CheckHouseDetail[2].trim(),
                HOUS_MULTI
            });
        }

    }

    private void PeneDetail() {

        List<String> getListPeneDetail = cld.GetResultPeneDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListPeneDetail.size(); i++) {
            String[] CheckPeneDetail = getListPeneDetail.get(i).split(";");
            mPene.insertRow(mPene.getRowCount(), new Object[]{
                CheckPeneDetail[0].trim(),
                CheckPeneDetail[1].trim()
            });
        }

    }

    private void FlockDetail() {

        List<String> getListFlockDetail = cld.GetResultFlockDetail(BRLogin.vFarm, BRLogin.vDuckBreed);
        ResetModel();

        for (int i = 0; i < getListFlockDetail.size(); i++) {
            String[] CheckFlockDetail = getListFlockDetail.get(i).split(";");
            String FLOC_STATUS;
            if ("0".equals(CheckFlockDetail[4].trim()) || "".equals(CheckFlockDetail[4].trim())) {
                FLOC_STATUS = "No";
            } else {
                FLOC_STATUS = "Yes";
            }
            mFlock.insertRow(mFlock.getRowCount(), new Object[]{
                CheckFlockDetail[0].trim(),
                CheckFlockDetail[1].trim(),
                CheckFlockDetail[2].trim(),
                CheckFlockDetail[3].trim(),
                FLOC_STATUS.trim(),
                CheckFlockDetail[5].trim()
            });
        }

    }

    private void ItemDetail() {

        List<String> getListItemDetail = cld.GetResultItemDetail(BRLogin.vFarm, BRLogin.vDuckBreed, BRLogin.vDuckBreedAll);
        ResetModel();

        for (int i = 0; i < getListItemDetail.size(); i++) {
            String[] CheckItemDetail = getListItemDetail.get(i).split(";");
            String ITEM_STKCTL, ITEM_STOCK, ITEM_MULTI;
            if ("0".equals(CheckItemDetail[5].trim()) || "".equals(CheckItemDetail[5].trim())) {
                ITEM_STKCTL = "No";
            } else {
                ITEM_STKCTL = "Yes";
            }

            if ("0".equals(CheckItemDetail[6].trim()) || "".equals(CheckItemDetail[6].trim())) {
                ITEM_STOCK = "No";
            } else {
                ITEM_STOCK = "Yes";
            }

            if ("0".equals(CheckItemDetail[8].trim()) || "".equals(CheckItemDetail[8].trim())) {
                ITEM_MULTI = "No";
            } else {
                ITEM_MULTI = "Yes";
            }

            mItem.insertRow(mItem.getRowCount(), new Object[]{
                CheckItemDetail[0].trim(),
                CheckItemDetail[1].trim(),
                CheckItemDetail[2].trim(),
                CheckItemDetail[3].trim(),
                CheckItemDetail[4].trim(),
                ITEM_STKCTL.trim(),
                ITEM_STOCK.trim(),
                CheckItemDetail[7].trim(),
                ITEM_MULTI.trim()

            });
        }

    }

    private void InforDetail() {

        List<String> getListInforDetail = cld.GetResultInforDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListInforDetail.size(); i++) {
            String[] CheckFlockDetail = getListInforDetail.get(i).split(";");
            mInfor.insertRow(mInfor.getRowCount(), new Object[]{
                CheckFlockDetail[0].trim(),
                CheckFlockDetail[1].trim(),
                CheckFlockDetail[2].trim(),
                CheckFlockDetail[3].trim(),
                CheckFlockDetail[4].trim(),
                CheckFlockDetail[5].trim(),
                CheckFlockDetail[6].trim()
            });
        }

    }
    private void InforDetailwithnopene() {

        List<String> getListInforDetail = cld.InforDetailwithnopene(BRLogin.vFarm,jcbHouse.getSelectedItem().toString(),sdf2.format(jXDateStart.getDate()), sdf2.format(jXDateEnd.getDate()));
        ResetModel();

        for (int i = 0; i < getListInforDetail.size(); i++) {
            String[] CheckFlockDetail = getListInforDetail.get(i).split(";");
            mInfor.insertRow(mInfor.getRowCount(), new Object[]{
                CheckFlockDetail[0].trim(),
                CheckFlockDetail[1].trim(),
                CheckFlockDetail[2].trim(),
                CheckFlockDetail[3].trim(),
                CheckFlockDetail[4].trim(),
                CheckFlockDetail[5].trim(),
                CheckFlockDetail[6].trim()
            });
        }

    }
    
    private void InforDetailwithpene() {

        List<String> getListInforDetail = cld.GetResultInforDetailWithPene(BRLogin.vFarm,jcbItem.getSelectedItem().toString(),jcbHouse.getSelectedItem().toString(),sdf2.format(jXDateStart.getDate()), sdf2.format(jXDateEnd.getDate()));
        ResetModel();

        for (int i = 0; i < getListInforDetail.size(); i++) {
            String[] CheckFlockDetail = getListInforDetail.get(i).split(";");
            mInfor.insertRow(mInfor.getRowCount(), new Object[]{
                CheckFlockDetail[0].trim(),
                CheckFlockDetail[1].trim(),
                CheckFlockDetail[2].trim(),
                CheckFlockDetail[3].trim(),
                CheckFlockDetail[4].trim(),
                CheckFlockDetail[5].trim(),
                CheckFlockDetail[6].trim()
            });
        }

    }

    private void TypeDetail() {

        List<String> getListTypeDetail = cld.GetResultTypeDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListTypeDetail.size(); i++) {
            String[] CheckItemDetail = getListTypeDetail.get(i).split(";");
            String TYPE_PROPERTY;
            if ("0".equals(CheckItemDetail[2].trim()) || "".equals(CheckItemDetail[2].trim())) {
                TYPE_PROPERTY = "No";
            } else {
                TYPE_PROPERTY = "Yes";
            }

            mType.insertRow(mType.getRowCount(), new Object[]{
                CheckItemDetail[0].trim(),
                CheckItemDetail[1].trim(),
                TYPE_PROPERTY.trim()
            });
        }

    }

    private void UnitDetail() {

        List<String> getListItemUnitDetail = cld.GetResultItemUnitDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListItemUnitDetail.size(); i++) {
            String[] CheckItemUnitDetail = getListItemUnitDetail.get(i).split(";");
            String ITUN_STATUS;
            if ("0".equals(CheckItemUnitDetail[2].trim()) || "".equals(CheckItemUnitDetail[2].trim())) {
                ITUN_STATUS = "No";
            } else {
                ITUN_STATUS = "Yes";
            }

            mUnit.insertRow(mUnit.getRowCount(), new Object[]{
                CheckItemUnitDetail[0].trim(),
                CheckItemUnitDetail[1].trim(),
                ITUN_STATUS.trim()
            });
        }

    }

    private void GroupDetail() {

        List<String> getListItemGroupDetail = cld.GetResultItemGroupDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListItemGroupDetail.size(); i++) {
            String[] CheckItemGroupDetail = getListItemGroupDetail.get(i).split(";");
            String ITGR_STATUS;
            if ("0".equals(CheckItemGroupDetail[2].trim()) || "".equals(CheckItemGroupDetail[2].trim())) {
                ITGR_STATUS = "No";
            } else {
                ITGR_STATUS = "Yes";
            }

            mGroup.insertRow(mGroup.getRowCount(), new Object[]{
                CheckItemGroupDetail[0].trim(),
                CheckItemGroupDetail[1].trim(),
                ITGR_STATUS.trim()
            });
        }

    }

    private void CertDetail() {

        List<String> getListCertDetail = cld.GetResultCertDetail(BRLogin.vFarm);
        ResetModel();

        for (int i = 0; i < getListCertDetail.size(); i++) {
            String[] CheckCertDetail = getListCertDetail.get(i).split(";");
            mCert.insertRow(mCert.getRowCount(), new Object[]{
                CheckCertDetail[0].trim(),
                CheckCertDetail[1].trim()
            });
        }

    }

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (!"Yes".equals(FrameOpen)) {

            if ("Farm".equals(JPanel)) {
                FarmDetail();
            } else if ("House".equals(JPanel)) {
                HouseDetail();
            } else if ("Pene".equals(JPanel)) {
                PeneDetail();
            } else if ("Flock".equals(JPanel)) {
                FlockDetail();
            } else if ("Item".equals(JPanel)) {
                ItemDetail();
            } else if ("Infor".equals(JPanel)) {
                InforDetail();
            } else if ("Type".equals(JPanel)) {
                TypeDetail();
            } else if ("Unit".equals(JPanel)) {
                UnitDetail();
            } else if ("Group".equals(JPanel)) {
                GroupDetail();
            } else if ("Cert".equals(JPanel)) {
                CertDetail();
            }

            FrameOpen = "Yes";
        }
    }//GEN-LAST:event_formWindowActivated

    private void jpTypeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpTypeComponentShown
        // TODO add your handling code here:
        JPanel = "Type";
        TypeDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpTypeComponentShown

    private void jTableTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTypeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableTypeMouseClicked

    private void jpInforComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpInforComponentShown
        // TODO add your handling code here:
        JPanel = "Infor";
        InforDetail();
//        jMenuCreate.setEnabled(false);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(false);
    }//GEN-LAST:event_jpInforComponentShown

    private void jTableInforMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInforMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableInforMouseClicked

    private void jpItemComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpItemComponentShown
        // TODO add your handling code here:
        JPanel = "Item";
        ItemDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpItemComponentShown

    private void jTableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItemMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableItemMouseClicked

    private void jpLockComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpLockComponentShown
        // TODO add your handling code here:
        JPanel = "Flock";
        FlockDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpLockComponentShown

    private void jTableFlockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFlockMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableFlockMouseClicked

    private void jpPeneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpPeneComponentShown
        // TODO add your handling code here:
        JPanel = "Pene";
        PeneDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpPeneComponentShown

    private void jTablePeneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePeneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTablePeneMouseClicked

    private void jpHouseComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpHouseComponentShown
        // TODO add your handling code here:
        JPanel = "House";
        HouseDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpHouseComponentShown

    private void jTableHouseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHouseMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableHouseMouseClicked

    private void jpFarmComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpFarmComponentShown
        // TODO add your handling code here:
        JPanel = "Farm";
        FarmDetail();
//        jMenuCreate.setEnabled(false);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(false);
    }//GEN-LAST:event_jpFarmComponentShown

    private void jTableUnitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableUnitMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableUnitMouseClicked

    private void jTableGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableGroupMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableGroupMouseClicked

    private void jTableCertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCertMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCertMouseClicked

    private void jpUnitComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpUnitComponentShown
        // TODO add your handling code here:
        JPanel = "Unit";
        UnitDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpUnitComponentShown

    private void jpGroupComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpGroupComponentShown
        // TODO add your handling code here:
        JPanel = "Group";
        GroupDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpGroupComponentShown

    private void jpCertComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jpCertComponentShown
        // TODO add your handling code here:
        JPanel = "Cert";
        CertDetail();
//        jMenuCreate.setEnabled(true);
//        jMenuChange.setEnabled(true);
//        jMenuDelete.setEnabled(true);
    }//GEN-LAST:event_jpCertComponentShown

    private void jMenuCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCreateMouseClicked
        // TODO add your handling code here:
        if ("Farm".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRFarm01().setVisible(true);
        } else if ("House".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRHouse01().setVisible(true);
        } else if ("Pene".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRPene01().setVisible(true);
        } else if ("Flock".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRFlock01().setVisible(true);
        } else if ("Item".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRItem01().setVisible(true);
        } else if ("Infor".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRInform01().setVisible(true);
        } else if ("Type".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRType01().setVisible(true);
        } else if ("Unit".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRItemUnit01().setVisible(true);
        } else if ("Group".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRItemGroup01().setVisible(true);
        } else if ("Cert".equals(JPanel) && jMenuCreate.isEnabled() == true) {
            new BRCert01().setVisible(true);
        }
        OnCreate = "Yes";
    }//GEN-LAST:event_jMenuCreateMouseClicked

    private void jMenuChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuChangeMouseClicked
        // TODO add your handling code here:
        if ("Farm".equals(JPanel) && jMenuChange.isEnabled() == true) {

            int index = jTableFarm.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vFARM_CODE = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 0));
                vFARM_NAME = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 1));
                vFARM_COSTC = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 2));
                vFARM_ADDR1 = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 3));
                vFARM_ADDR2 = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 4));
                vFARM_TEL = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 5));
                vFARM_FAX = String.valueOf(mFarm.getValueAt(jTableFarm.getSelectedRow(), 6));
                new BRFarm01().setVisible(true);
                OnChange = "Yes";
            }

        } else if ("House".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableHouse.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vHOUS_CODE = String.valueOf(mHouse.getValueAt(jTableHouse.getSelectedRow(), 0));
                vHOUS_NAME = String.valueOf(mHouse.getValueAt(jTableHouse.getSelectedRow(), 1));
                vHOUS_LASTMO = String.valueOf(mHouse.getValueAt(jTableHouse.getSelectedRow(), 2));
                vHOUS_MULTI = String.valueOf(mHouse.getValueAt(jTableHouse.getSelectedRow(), 3));
                new BRHouse01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Pene".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTablePene.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vPENE_CODE = String.valueOf(mPene.getValueAt(jTablePene.getSelectedRow(), 0));
                vPENE_NAME = String.valueOf(mPene.getValueAt(jTablePene.getSelectedRow(), 1));
                new BRPene01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Flock".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableFlock.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vFLOC_CODE = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 0));
                vFLOC_STDATE = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 1));
                vFLOC_ENDATE = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 2));
                vFLOC_BREED = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 3));
                vFLOC_STATUS = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 4));
                vFLOC_STWEEK = String.valueOf(mFlock.getValueAt(jTableFlock.getSelectedRow(), 5));
                new BRFlock01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Item".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableItem.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vITEM_CODE = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 0));
                vITEM_NAME = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 1));
                vITEM_UNIT = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 2));
                vITEM_GROUP = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 3));
                vITEM_FLOCATON = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 4));
                vITEM_STKCTL = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 5));
                vITEM_STOCK = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 6));
                vITEM_EFFITEM = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 7));
                vITEM_MULTI = String.valueOf(mItem.getValueAt(jTableItem.getSelectedRow(), 8));
                new BRItem01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Infor".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableInfor.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vINFO_DATE = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 0));
                vINFO_HOUSE = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 1));
                vINFO_ITEM = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 2));
                vINFO_DESC = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 3));
                vINFO_DISE = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 4));
                vINFO_QTY = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 5));
                vINFO_REFER = String.valueOf(mInfor.getValueAt(jTableInfor.getSelectedRow(), 6));
                new BRInform01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Type".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableType.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vTYPE_CODE = String.valueOf(mType.getValueAt(jTableType.getSelectedRow(), 0));
                vTYPE_NAME = String.valueOf(mType.getValueAt(jTableType.getSelectedRow(), 1));
                vTYPE_PROPERTY = String.valueOf(mType.getValueAt(jTableType.getSelectedRow(), 2));
                new BRType01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Unit".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableUnit.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vITUN_CODE = String.valueOf(mUnit.getValueAt(jTableUnit.getSelectedRow(), 0));
                vITUN_NAME = String.valueOf(mUnit.getValueAt(jTableUnit.getSelectedRow(), 1));
                vITUN_PROPERTY = String.valueOf(mUnit.getValueAt(jTableUnit.getSelectedRow(), 2));
                new BRItemUnit01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Group".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableGroup.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vITGR_CODE = String.valueOf(mGroup.getValueAt(jTableGroup.getSelectedRow(), 0));
                vITGR_NAME = String.valueOf(mGroup.getValueAt(jTableGroup.getSelectedRow(), 1));
                vITGR_PROPERTY = String.valueOf(mGroup.getValueAt(jTableGroup.getSelectedRow(), 2));
                new BRItemGroup01().setVisible(true);
                OnChange = "Yes";
            }
        } else if ("Cert".equals(JPanel) && jMenuChange.isEnabled() == true) {
            int index = jTableCert.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Change!");
            } else {
                vCERT_CODE = String.valueOf(mCert.getValueAt(jTableCert.getSelectedRow(), 0));
                vCERT_NAME = String.valueOf(mCert.getValueAt(jTableCert.getSelectedRow(), 1));
                new BRCert01().setVisible(true);
                OnChange = "Yes";
            }
        }
    }//GEN-LAST:event_jMenuChangeMouseClicked

    private void jMenuDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDeleteMouseClicked
        // TODO add your handling code here:
        if ("Farm".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableFarm.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String FARM_CODE = BRLogin.vFarm;
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteFarm(FARM_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    FarmDetail(); //Reload Table
                }
            }
        } else if ("House".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableHouse.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String HOUS_CODE = jTableHouse.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    String breed;
                    if ("1".equals(BRHouse01.vMulti)) {
                        breed = "AL";
                    } else {
                        breed = BRLogin.vDuckBreed;
                    }
                    cid.DeleteHouse(BRLogin.vFarm, HOUS_CODE, breed); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    HouseDetail(); //Reload Table
                }
            }
        } else if ("Pene".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTablePene.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String PENE_CODE = jTablePene.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeletePene(BRLogin.vFarm, PENE_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    PeneDetail(); //Reload Tabal
                }
            }
        } else if ("Flock".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableFlock.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String FLOC_CODE = jTableFlock.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteFlock(BRLogin.vFarm, FLOC_CODE, BRLogin.vDuckBreed); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    FlockDetail(); //Reload Table
                }
            }
        } else if ("Item".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableItem.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String ITEM_CODE = jTableItem.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    String breed;
                    if ("1".equals(BRItem01.vMulti)) {
                        breed = "AL";
                    } else {
                        breed = BRLogin.vDuckBreed;
                    }
                    cid.DeleteItem(BRLogin.vFarm, ITEM_CODE, breed); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    ItemDetail(); //Reload Table
                }
            }
        } else if ("Infor".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableInfor.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String INFO_DATE = jTableInfor.getValueAt(index, 0).toString();
                String INFO_HOUSE = jTableInfor.getValueAt(index, 1).toString();
                String INFO_ITEM = jTableInfor.getValueAt(index, 2).toString();
                String INFO_DESC = jTableInfor.getValueAt(index, 3).toString();
                String INFO_DISE = jTableInfor.getValueAt(index, 4).toString();
                String INFO_QTY = jTableInfor.getValueAt(index, 5).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteMInfor(BRLogin.vFarm, INFO_DATE, INFO_HOUSE, INFO_ITEM, INFO_DESC, INFO_DISE, INFO_QTY, BRLogin.vDuckBreed); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    InforDetail(); //Reload Table
                }
            }
        } else if ("Type".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableType.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String TYPE_CODE = jTableType.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteType(BRLogin.vFarm, TYPE_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    TypeDetail(); //Reload Table
                }
            }
        } else if ("Unit".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableUnit.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String UNIT_CODE = jTableUnit.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteUnit(BRLogin.vFarm, UNIT_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    UnitDetail(); //Reload Table
                }
            }
        } else if ("Group".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableGroup.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String GROUP_CODE = jTableGroup.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteGroup(BRLogin.vFarm, GROUP_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    GroupDetail(); //Reload Table
                }
            }
        } else if ("Cert".equals(JPanel) && jMenuDelete.isEnabled() == true) {

            int index = jTableCert.getSelectedRow();
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "Please select " + JPanel + " record for Delete!");
            } else {
                String CERT_CODE = jTableCert.getValueAt(index, 0).toString();
                Object[] options = {"Yes", "No"};
                int n = JOptionPane.showOptionDialog(null, "Do you want to Delete data?",
                        "Confirm to Delete?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);
                if (n == 0) // Confirm Delete = Yes
                {
                    cid.DeleteCert(BRLogin.vFarm, CERT_CODE); // Delete Data
                    JOptionPane.showMessageDialog(null, "Delete Success");
                    CertDetail(); //Reload Table
                }
            }
        }
    }//GEN-LAST:event_jMenuDeleteMouseClicked

    private void jMenuRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRefreshMouseClicked
        // TODO add your handling code here:
        if ("Farm".equals(JPanel)) {
            FarmDetail();
            jpFarm.requestFocusInWindow();
        } else if ("House".equals(JPanel)) {
            HouseDetail();
        } else if ("Pene".equals(JPanel)) {
            PeneDetail();
        } else if ("Flock".equals(JPanel)) {
            FlockDetail();
        } else if ("Item".equals(JPanel)) {
            ItemDetail();
        } else if ("Infor".equals(JPanel)) {
            InforDetail();
        } else if ("Type".equals(JPanel)) {
            TypeDetail();
        } else if ("Unit".equals(JPanel)) {
            UnitDetail();
        } else if ("Group".equals(JPanel)) {
            GroupDetail();
        } else if ("Cert".equals(JPanel)) {
            CertDetail();
        }
        jMenuBar1.requestFocusInWindow();
        this.validate();

    }//GEN-LAST:event_jMenuRefreshMouseClicked

    private void jcbHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbHouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbHouseActionPerformed

    private void jcbHouseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbHouseKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbHouseKeyPressed

    private void jcbItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbItemActionPerformed

    private void jcbItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbItemKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbItemKeyPressed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
//         TODO add your handling code here:
        if ("Please Select : House".equals(jcbHouse.getSelectedItem().toString())) {
            InforDetail();
        } else if("Please Select : Pene".equals(jcbItem.getSelectedItem().toString())){
           InforDetailwithnopene();
        }
        else{
            InforDetailwithpene();
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BRData01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BRData01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BRData01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BRData01.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BRData01().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelFlockSTDate;
    private javax.swing.JLabel jLabelFlockSTDate1;
    private javax.swing.JLabel jLabelHouse;
    private javax.swing.JLabel jLabelItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuChange;
    private javax.swing.JMenu jMenuCreate;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuRefresh;
    private javax.swing.JMenu jMenuSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableCert;
    private javax.swing.JTable jTableFarm;
    private javax.swing.JTable jTableFlock;
    private javax.swing.JTable jTableGroup;
    private javax.swing.JTable jTableHouse;
    private javax.swing.JTable jTableInfor;
    private javax.swing.JTable jTableItem;
    private javax.swing.JTable jTablePene;
    private javax.swing.JTable jTableType;
    private javax.swing.JTable jTableUnit;
    private org.jdesktop.swingx.JXDatePicker jXDateEnd;
    private org.jdesktop.swingx.JXDatePicker jXDateStart;
    private javax.swing.JComboBox jcbHouse;
    private javax.swing.JComboBox jcbItem;
    private javax.swing.JPanel jpCert;
    private javax.swing.JPanel jpFarm;
    private javax.swing.JPanel jpGroup;
    private javax.swing.JPanel jpHouse;
    private javax.swing.JPanel jpInfor;
    private javax.swing.JPanel jpItem;
    private javax.swing.JPanel jpLock;
    private javax.swing.JPanel jpPene;
    private javax.swing.JPanel jpType;
    private javax.swing.JPanel jpUnit;
    // End of variables declaration//GEN-END:variables
}
